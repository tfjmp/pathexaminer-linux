kernel/fork.c:1699:37: attention : always_inline function might not be inlinable [-Wattributes]
 __attribute__((always_inline)) long _do_fork(unsigned long clone_flags,
                                     ^
kernel/fork.c:1246:59: attention : always_inline function might not be inlinable [-Wattributes]
 __attribute__((always_inline)) static struct task_struct *copy_process(unsigned long clone_flags,
                                                           ^
Building the rich basic blocks
About to build basic block 0
is it a loop? false
Building a regular RichBasicBlock 0
About to build basic block 2
is it a loop? false
Building a regular RichBasicBlock 2
    has flow: false    has LSM: false
About to build basic block 3
is it a loop? false
Building a regular RichBasicBlock 3
    has flow: false    has LSM: false
About to build basic block 4
is it a loop? false
Building a regular RichBasicBlock 4
    has flow: false    has LSM: false
About to build basic block 5
is it a loop? false
Building a regular RichBasicBlock 5
    has flow: false    has LSM: false
About to build basic block 6
is it a loop? false
Building a regular RichBasicBlock 6
    has flow: false    has LSM: false
About to build basic block 7
is it a loop? false
Building a regular RichBasicBlock 7
    has flow: false    has LSM: false
About to build basic block 8
is it a loop? false
Building a regular RichBasicBlock 8
    has flow: false    has LSM: false
About to build basic block 9
is it a loop? false
Building a regular RichBasicBlock 9
    has flow: false    has LSM: false
About to build basic block 10
is it a loop? false
Building a regular RichBasicBlock 10
    has flow: false    has LSM: false
About to build basic block 11
is it a loop? false
Building a regular RichBasicBlock 11
    has flow: false    has LSM: false
About to build basic block 12
is it a loop? false
Building a regular RichBasicBlock 12
    has flow: false    has LSM: false
About to build basic block 13
is it a loop? false
Building a regular RichBasicBlock 13
    has flow: false    has LSM: false
About to build basic block 14
is it a loop? false
Building a regular RichBasicBlock 14
    has flow: false    has LSM: false
About to build basic block 15
is it a loop? false
Building a regular RichBasicBlock 15
GIMPLE CALL
GIMPLE CALL with a decl
name: security_task_create	isLSM: true	isFlow: false
    has flow: false    has LSM: true
About to build basic block 16
is it a loop? false
Building a regular RichBasicBlock 16
    has flow: false    has LSM: false
About to build basic block 17
is it a loop? false
Building a regular RichBasicBlock 17
GIMPLE CALL
GIMPLE CALL with a decl
name: task_active_pid_ns	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 18
is it a loop? false
Building a regular RichBasicBlock 18
    has flow: false    has LSM: false
About to build basic block 19
is it a loop? false
Building a regular RichBasicBlock 19
GIMPLE CALL
GIMPLE CALL with a decl
name: dup_task_struct	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 20
is it a loop? false
Building a regular RichBasicBlock 20
    has flow: false    has LSM: false
About to build basic block 21
is it a loop? false
Building a regular RichBasicBlock 21
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_creds	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 22
is it a loop? false
Building a regular RichBasicBlock 22
    has flow: false    has LSM: false
About to build basic block 23
is it a loop? false
Building a regular RichBasicBlock 23
GIMPLE CALL
GIMPLE CALL with a decl
name: capable	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 24
is it a loop? false
Building a regular RichBasicBlock 24
GIMPLE CALL
GIMPLE CALL with a decl
name: capable	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 25
is it a loop? false
Building a regular RichBasicBlock 25
    has flow: false    has LSM: false
About to build basic block 26
is it a loop? false
Building a regular RichBasicBlock 26
    has flow: false    has LSM: false
About to build basic block 27
is it a loop? false
Building a regular RichBasicBlock 27
    has flow: false    has LSM: false
About to build basic block 28
is it a loop? false
Building a regular RichBasicBlock 28
GIMPLE CALL
GIMPLE CALL with a decl
name: __delayacct_tsk_init	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 29
is it a loop? false
Building a regular RichBasicBlock 29
GIMPLE CALL
GIMPLE CALL with a decl
name: memset	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: memset	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: acct_clear_integrals	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: posix_cpu_timers_init	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: ktime_get	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: ktime_get_with_offset	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 30
is it a loop? false
Building a regular RichBasicBlock 30
GIMPLE CALL
GIMPLE CALL with a decl
name: _cond_resched	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: cgroup_threadgroup_change_begin	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 31
is it a loop? false
Building a regular RichBasicBlock 31
GIMPLE CALL
GIMPLE CALL with a decl
name: cgroup_fork	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 32
is it a loop? false
Building a regular RichBasicBlock 32
GIMPLE CALL
GIMPLE CALL with a decl
name: __mpol_dup	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 33
is it a loop? false
Building a regular RichBasicBlock 33
    has flow: false    has LSM: false
About to build basic block 34
is it a loop? false
Building a regular RichBasicBlock 34
GIMPLE CALL
GIMPLE CALL with a decl
name: sched_fork	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 35
is it a loop? false
Building a regular RichBasicBlock 35
GIMPLE CALL
GIMPLE CALL with a decl
name: perf_event_init_task	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 36
is it a loop? false
Building a regular RichBasicBlock 36
GIMPLE CALL
GIMPLE CALL with a decl
name: audit_alloc	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 37
is it a loop? false
Building a regular RichBasicBlock 37
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_semundo	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 38
is it a loop? false
Building a regular RichBasicBlock 38
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_files	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 39
is it a loop? false
Building a regular RichBasicBlock 39
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_fs	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 40
is it a loop? false
Building a regular RichBasicBlock 40
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_sighand	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 41
is it a loop? false
Building a regular RichBasicBlock 41
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_signal	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 42
is it a loop? false
Building a regular RichBasicBlock 42
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_mm	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 43
is it a loop? false
Building a regular RichBasicBlock 43
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_namespaces	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 44
is it a loop? false
Building a regular RichBasicBlock 44
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_io	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 45
is it a loop? false
Building a regular RichBasicBlock 45
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_thread_tls	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 46
is it a loop? false
Building a regular RichBasicBlock 46
    has flow: false    has LSM: false
About to build basic block 47
is it a loop? false
Building a regular RichBasicBlock 47
GIMPLE CALL
GIMPLE CALL with a decl
name: alloc_pid	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 48
is it a loop? false
Building a regular RichBasicBlock 48
    has flow: false    has LSM: false
About to build basic block 49
is it a loop? false
Building a regular RichBasicBlock 49
    has flow: false    has LSM: false
About to build basic block 50
is it a loop? false
Building a regular RichBasicBlock 50
    has flow: false    has LSM: false
About to build basic block 51
is it a loop? false
Building a regular RichBasicBlock 51
    has flow: false    has LSM: false
About to build basic block 52
is it a loop? false
Building a regular RichBasicBlock 52
    has flow: false    has LSM: false
About to build basic block 53
is it a loop? false
Building a regular RichBasicBlock 53
    has flow: false    has LSM: false
About to build basic block 54
is it a loop? false
Building a regular RichBasicBlock 54
    has flow: false    has LSM: false
About to build basic block 55
is it a loop? false
Building a regular RichBasicBlock 55
GIMPLE CALL
GIMPLE CALL with a decl
name: user_disable_single_step	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: clear_tsk_thread_flag	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: clear_tsk_thread_flag	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 56
is it a loop? false
Building a regular RichBasicBlock 56
    has flow: false    has LSM: false
About to build basic block 57
is it a loop? false
Building a regular RichBasicBlock 57
    has flow: false    has LSM: false
About to build basic block 58
is it a loop? false
Building a regular RichBasicBlock 58
    has flow: false    has LSM: false
About to build basic block 59
is it a loop? false
Building a regular RichBasicBlock 59
    has flow: false    has LSM: false
About to build basic block 60
is it a loop? false
Building a regular RichBasicBlock 60
    has flow: false    has LSM: false
About to build basic block 61
is it a loop? false
Building a regular RichBasicBlock 61
    has flow: false    has LSM: false
About to build basic block 62
is it a loop? false
Building a regular RichBasicBlock 62
    has flow: false    has LSM: false
About to build basic block 63
is it a loop? false
Building a regular RichBasicBlock 63
GIMPLE CALL
GIMPLE CALL with a decl
name: cgroup_can_fork	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 64
is it a loop? false
Building a regular RichBasicBlock 64
GIMPLE CALL
GIMPLE CALL with a decl
name: _raw_write_lock_irq	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 65
is it a loop? false
Building a regular RichBasicBlock 65
    has flow: false    has LSM: false
About to build basic block 66
is it a loop? false
Building a regular RichBasicBlock 66
    has flow: false    has LSM: false
About to build basic block 67
is it a loop? false
Building a regular RichBasicBlock 67
GIMPLE CALL
GIMPLE CALL with a decl
name: _raw_spin_lock	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_seccomp	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: recalc_sigpending	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: signal_pending	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 68
is it a loop? false
Building a regular RichBasicBlock 68
GIMPLE CALL
GIMPLE CALL with a decl
name: cgroup_cancel_fork	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 69
is it a loop? false
Building a regular RichBasicBlock 69
    has flow: false    has LSM: false
About to build basic block 70
is it a loop? false
Building a regular RichBasicBlock 70
    has flow: false    has LSM: false
About to build basic block 71
is it a loop? false
Building a regular RichBasicBlock 71
    has flow: false    has LSM: false
About to build basic block 72
is it a loop? false
Building a regular RichBasicBlock 72
GIMPLE CALL
GIMPLE CALL with a decl
name: ptrace_init_task	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 73
is it a loop? false
Building a regular RichBasicBlock 73
    has flow: false    has LSM: false
About to build basic block 74
is it a loop? false
Building a regular RichBasicBlock 74
    has flow: false    has LSM: false
About to build basic block 75
is it a loop? false
Building a regular RichBasicBlock 75
    has flow: false    has LSM: false
About to build basic block 76
is it a loop? false
Building a regular RichBasicBlock 76
    has flow: false    has LSM: false
About to build basic block 77
is it a loop? false
Building a regular RichBasicBlock 77
GIMPLE CALL
GIMPLE CALL with a decl
name: tty_kref_get	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: attach_pid	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: attach_pid	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 78
is it a loop? false
Building a regular RichBasicBlock 78
    has flow: false    has LSM: false
About to build basic block 79
is it a loop? false
Building a regular RichBasicBlock 79
GIMPLE CALL
GIMPLE CALL with a decl
name: attach_pid	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 80
is it a loop? false
Building a regular RichBasicBlock 80
GIMPLE CALL
GIMPLE CALL with a decl
name: syscall_tracepoint_update	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: proc_fork_connector	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: cgroup_post_fork	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 81
is it a loop? false
Building a regular RichBasicBlock 81
GIMPLE CALL
GIMPLE CALL with a decl
name: cgroup_threadgroup_change_end	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 82
is it a loop? false
Building a regular RichBasicBlock 82
GIMPLE CALL
GIMPLE CALL with a decl
name: perf_event_fork	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: trace_task_newtask	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 83
is it a loop? false
Building a regular RichBasicBlock 83
    has flow: false    has LSM: false
About to build basic block 84
is it a loop? false
Building a regular RichBasicBlock 84
GIMPLE CALL
GIMPLE CALL with a decl
name: free_pid	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 85
is it a loop? false
Building a regular RichBasicBlock 85
    has flow: false    has LSM: false
About to build basic block 86
is it a loop? false
Building a regular RichBasicBlock 86
GIMPLE CALL
GIMPLE CALL with a decl
name: exit_io_context	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 87
is it a loop? false
Building a regular RichBasicBlock 87
GIMPLE CALL
GIMPLE CALL with a decl
name: exit_task_namespaces	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 88
is it a loop? false
Building a regular RichBasicBlock 88
    has flow: false    has LSM: false
About to build basic block 89
is it a loop? false
Building a regular RichBasicBlock 89
GIMPLE CALL
GIMPLE CALL with a decl
name: mmput	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 90
is it a loop? false
Building a regular RichBasicBlock 90
    has flow: false    has LSM: false
About to build basic block 91
is it a loop? false
Building a regular RichBasicBlock 91
GIMPLE CALL
GIMPLE CALL with a decl
name: free_signal_struct	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 92
is it a loop? false
Building a regular RichBasicBlock 92
GIMPLE CALL
GIMPLE CALL with a decl
name: __cleanup_sighand	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 93
is it a loop? false
Building a regular RichBasicBlock 93
GIMPLE CALL
GIMPLE CALL with a decl
name: exit_fs	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 94
is it a loop? false
Building a regular RichBasicBlock 94
GIMPLE CALL
GIMPLE CALL with a decl
name: exit_files	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 95
is it a loop? false
Building a regular RichBasicBlock 95
GIMPLE CALL
GIMPLE CALL with a decl
name: exit_sem	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 96
is it a loop? false
Building a regular RichBasicBlock 96
GIMPLE CALL
GIMPLE CALL with a decl
name: audit_free	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 97
is it a loop? false
Building a regular RichBasicBlock 97
GIMPLE CALL
GIMPLE CALL with a decl
name: perf_event_free_task	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 98
is it a loop? false
Building a regular RichBasicBlock 98
    has flow: false    has LSM: false
About to build basic block 99
is it a loop? false
Building a regular RichBasicBlock 99
GIMPLE CALL
GIMPLE CALL with a decl
name: __mpol_put	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 100
is it a loop? false
Building a regular RichBasicBlock 100
    has flow: false    has LSM: false
About to build basic block 101
is it a loop? false
Building a regular RichBasicBlock 101
GIMPLE CALL
GIMPLE CALL with a decl
name: cgroup_threadgroup_change_end	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 102
is it a loop? false
Building a regular RichBasicBlock 102
    has flow: false    has LSM: false
About to build basic block 103
is it a loop? false
Building a regular RichBasicBlock 103
GIMPLE CALL
GIMPLE CALL with a decl
name: kmem_cache_free	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 104
is it a loop? false
Building a regular RichBasicBlock 104
    has flow: false    has LSM: false
About to build basic block 105
is it a loop? false
Building a regular RichBasicBlock 105
GIMPLE CALL
GIMPLE CALL with a decl
name: exit_creds	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 106
is it a loop? false
Building a regular RichBasicBlock 106
GIMPLE CALL
GIMPLE CALL with a decl
name: free_task	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 107
is it a loop? false
Building a regular RichBasicBlock 107
    has flow: false    has LSM: false
About to build basic block 108
is it a loop? false
Building a regular RichBasicBlock 108
    has flow: false    has LSM: false
About to build basic block 109
is it a loop? false
Building a regular RichBasicBlock 109
    has flow: false    has LSM: false
About to build basic block 110
is it a loop? false
Building a regular RichBasicBlock 110
    has flow: false    has LSM: false
About to build basic block 111
is it a loop? true
Building a regular RichBasicBlock 111
    has flow: false    has LSM: false
About to build basic block 112
is it a loop? true
Building a loop header pseudo-basic block
Building a regular RichBasicBlock 112
GIMPLE CALL
    has flow: false    has LSM: false
Loop added for basic_block 112
About to build basic block 113
is it a loop? false
Building a regular RichBasicBlock 113
    has flow: false    has LSM: false
About to build basic block 114
is it a loop? false
Building a regular RichBasicBlock 114
GIMPLE CALL
GIMPLE CALL with a decl
name: get_task_pid	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: pid_vnr	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 115
is it a loop? false
Building a regular RichBasicBlock 115
    has flow: false    has LSM: false
About to build basic block 116
is it a loop? false
Building a regular RichBasicBlock 116
    has flow: false    has LSM: false
About to build basic block 117
is it a loop? false
Building a regular RichBasicBlock 117
GIMPLE CALL
GIMPLE CALL with a decl
name: __init_waitqueue_head	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 118
is it a loop? false
Building a regular RichBasicBlock 118
GIMPLE CALL
GIMPLE CALL with a decl
name: kayrebt_FlowNodeMarker	isLSM: false	isFlow: true
GIMPLE CALL
GIMPLE CALL with a decl
name: wake_up_new_task	isLSM: false	isFlow: true
    has flow: true    has LSM: false
About to build basic block 119
is it a loop? false
Building a regular RichBasicBlock 119
GIMPLE CALL
GIMPLE CALL with a decl
name: ptrace_event_pid	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 120
is it a loop? false
Building a regular RichBasicBlock 120
    has flow: false    has LSM: false
About to build basic block 121
is it a loop? false
Building a regular RichBasicBlock 121
    has flow: false    has LSM: false
About to build basic block 122
is it a loop? false
Building a regular RichBasicBlock 122
GIMPLE CALL
GIMPLE CALL with a decl
name: wait_for_vfork_done	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 123
is it a loop? false
Building a regular RichBasicBlock 123
GIMPLE CALL
GIMPLE CALL with a decl
name: task_active_pid_ns	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 124
is it a loop? false
Building a regular RichBasicBlock 124
GIMPLE CALL
GIMPLE CALL with a decl
name: pid_nr_ns	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 125
is it a loop? false
Building a regular RichBasicBlock 125
    has flow: false    has LSM: false
About to build basic block 126
is it a loop? false
Building a regular RichBasicBlock 126
GIMPLE CALL
GIMPLE CALL with a decl
name: ptrace_notify	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 127
is it a loop? false
Building a regular RichBasicBlock 127
GIMPLE CALL
GIMPLE CALL with a decl
name: put_pid	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 128
is it a loop? false
Building a regular RichBasicBlock 128
    has flow: false    has LSM: false
About to build basic block 129
is it a loop? false
Building a regular RichBasicBlock 129
    has flow: false    has LSM: false
About to build basic block 130
is it a loop? false
Building a regular RichBasicBlock 130
    has flow: false    has LSM: false
About to build basic block 131
is it a loop? false
Building a regular RichBasicBlock 131
    has flow: false    has LSM: false
About to build basic block 132
is it a loop? false
Building a regular RichBasicBlock 132
    has flow: false    has LSM: false
About to build basic block 133
is it a loop? false
Building a regular RichBasicBlock 133
    has flow: false    has LSM: false
About to build basic block 1
is it a loop? false
There are 1 bbs with flow nodes (excluding those having LSM nodes)
Examining <118> (succs: 119 120 )
basic block 116 is a predecessor
got the corresponding RichBasicBlock
<116> (succs: 117 118 ) is white, visiting it first
basic block 114 is a predecessor
got the corresponding RichBasicBlock
<114> (succs: 115 116 ) is white, visiting it first
basic block 113 is a predecessor
got the corresponding RichBasicBlock
<113> (succs: 114 ) is white, visiting it first
basic block 112 is a predecessor
got the corresponding RichBasicBlock
(Loop header) <112> (succs: 111 113 ) is white, visiting it first
basic block 133 is a predecessor
got the corresponding RichBasicBlock
<133> (succs: 112 ) is white, visiting it first
basic block 132 is a predecessor
got the corresponding RichBasicBlock
<132> (succs: 133 113 ) is white, visiting it first
basic block 109 is a predecessor
got the corresponding RichBasicBlock
<109> (succs: 132 110 ) is white, visiting it first
basic block 108 is a predecessor
got the corresponding RichBasicBlock
<108> (succs: 109 128 ) is white, visiting it first
basic block 107 is a predecessor
got the corresponding RichBasicBlock
<107> (succs: 108 ) is white, visiting it first
basic block 18 is a predecessor
got the corresponding RichBasicBlock
<18> (succs: 107 ) is white, visiting it first
basic block 15 is a predecessor
got the corresponding RichBasicBlock
0x16271b0 is red
0x163b8b0 is red
basic block 19 is a predecessor
got the corresponding RichBasicBlock
<19> (succs: 107 20 ) is white, visiting it first
basic block 15 is a predecessor
got the corresponding RichBasicBlock
0x16271b0 is red
0x163b990 is red
basic block 106 is a predecessor
got the corresponding RichBasicBlock
<106> (succs: 107 ) is white, visiting it first
basic block 24 is a predecessor
got the corresponding RichBasicBlock
<24> (succs: 106 21 ) is white, visiting it first
basic block 23 is a predecessor
got the corresponding RichBasicBlock
<23> (succs: 24 21 ) is white, visiting it first
basic block 22 is a predecessor
got the corresponding RichBasicBlock
<22> (succs: 23 21 ) is white, visiting it first
basic block 20 is a predecessor
got the corresponding RichBasicBlock
<20> (succs: 22 21 ) is white, visiting it first
basic block 19 is a predecessor
got the corresponding RichBasicBlock
0x163b990 is red
0x163bac0 is red
0x163bd20 is red
0x163be50 is red
0x15f7820 is red
basic block 25 is a predecessor
got the corresponding RichBasicBlock
<25> (succs: 106 ) is white, visiting it first
basic block 21 is a predecessor
got the corresponding RichBasicBlock
<21> (succs: 25 26 ) is white, visiting it first
basic block 20 is a predecessor
got the corresponding RichBasicBlock
0x163bac0 is red
basic block 22 is a predecessor
got the corresponding RichBasicBlock
0x163bd20 is red
basic block 23 is a predecessor
got the corresponding RichBasicBlock
0x163be50 is red
basic block 24 is a predecessor
got the corresponding RichBasicBlock
0x15f7820 is red
0x163bbf0 is red
0x15f7950 is red
basic block 105 is a predecessor
got the corresponding RichBasicBlock
<105> (succs: 106 ) is white, visiting it first
basic block 26 is a predecessor
got the corresponding RichBasicBlock
<26> (succs: 105 27 ) is white, visiting it first
basic block 21 is a predecessor
got the corresponding RichBasicBlock
0x163bbf0 is red
0x15f7a30 is red
basic block 104 is a predecessor
got the corresponding RichBasicBlock
<104> (succs: 105 ) is white, visiting it first
basic block 102 is a predecessor
got the corresponding RichBasicBlock
<102> (succs: 103 104 ) is white, visiting it first
basic block 101 is a predecessor
got the corresponding RichBasicBlock
<101> (succs: 102 ) is white, visiting it first
basic block 100 is a predecessor
got the corresponding RichBasicBlock
<100> (succs: 101 102 ) is white, visiting it first
basic block 33 is a predecessor
got the corresponding RichBasicBlock
<33> (succs: 100 ) is white, visiting it first
basic block 32 is a predecessor
got the corresponding RichBasicBlock
<32> (succs: 33 34 ) is white, visiting it first
basic block 31 is a predecessor
got the corresponding RichBasicBlock
<31> (succs: 32 34 ) is white, visiting it first
basic block 29 is a predecessor
got the corresponding RichBasicBlock
<29> (succs: 30 31 ) is white, visiting it first
basic block 28 is a predecessor
got the corresponding RichBasicBlock
<28> (succs: 29 ) is white, visiting it first
basic block 27 is a predecessor
got the corresponding RichBasicBlock
<27> (succs: 28 29 ) is white, visiting it first
basic block 26 is a predecessor
got the corresponding RichBasicBlock
0x15f7a30 is red
0x15f7b60 is red
0x15f7c90 is red
basic block 27 is a predecessor
got the corresponding RichBasicBlock
0x15f7b60 is red
0x15f7d70 is red
basic block 30 is a predecessor
got the corresponding RichBasicBlock
<30> (succs: 31 ) is white, visiting it first
basic block 29 is a predecessor
got the corresponding RichBasicBlock
0x15f7d70 is red
0x15f7ea0 is red
0x15f7f80 is red
0x16a62e0 is red
0x16a6410 is red
basic block 99 is a predecessor
got the corresponding RichBasicBlock
<99> (succs: 100 ) is white, visiting it first
basic block 98 is a predecessor
got the corresponding RichBasicBlock
<98> (succs: 99 100 ) is white, visiting it first
basic block 34 is a predecessor
got the corresponding RichBasicBlock
<34> (succs: 98 35 ) is white, visiting it first
basic block 31 is a predecessor
got the corresponding RichBasicBlock
0x15f7f80 is red
basic block 32 is a predecessor
got the corresponding RichBasicBlock
0x16a62e0 is red
0x16a64f0 is red
basic block 35 is a predecessor
got the corresponding RichBasicBlock
<35> (succs: 98 36 ) is white, visiting it first
basic block 34 is a predecessor
got the corresponding RichBasicBlock
0x16a64f0 is red
0x16a6620 is red
basic block 97 is a predecessor
got the corresponding RichBasicBlock
<97> (succs: 98 ) is white, visiting it first
basic block 36 is a predecessor
got the corresponding RichBasicBlock
<36> (succs: 97 37 ) is white, visiting it first
basic block 35 is a predecessor
got the corresponding RichBasicBlock
0x16a6620 is red
0x16a6750 is red
basic block 96 is a predecessor
got the corresponding RichBasicBlock
<96> (succs: 97 ) is white, visiting it first
basic block 37 is a predecessor
got the corresponding RichBasicBlock
<37> (succs: 96 38 ) is white, visiting it first
basic block 36 is a predecessor
got the corresponding RichBasicBlock
0x16a6750 is red
0x16a6880 is red
basic block 95 is a predecessor
got the corresponding RichBasicBlock
<95> (succs: 96 ) is white, visiting it first
basic block 38 is a predecessor
got the corresponding RichBasicBlock
<38> (succs: 95 39 ) is white, visiting it first
basic block 37 is a predecessor
got the corresponding RichBasicBlock
0x16a6880 is red
0x16a69b0 is red
basic block 94 is a predecessor
got the corresponding RichBasicBlock
<94> (succs: 95 ) is white, visiting it first
basic block 39 is a predecessor
got the corresponding RichBasicBlock
<39> (succs: 94 40 ) is white, visiting it first
basic block 38 is a predecessor
got the corresponding RichBasicBlock
0x16a69b0 is red
0x16a6ae0 is red
basic block 93 is a predecessor
got the corresponding RichBasicBlock
<93> (succs: 94 ) is white, visiting it first
basic block 40 is a predecessor
got the corresponding RichBasicBlock
<40> (succs: 93 41 ) is white, visiting it first
basic block 39 is a predecessor
got the corresponding RichBasicBlock
0x16a6ae0 is red
0x16a6c10 is red
basic block 92 is a predecessor
got the corresponding RichBasicBlock
<92> (succs: 93 ) is white, visiting it first
basic block 41 is a predecessor
got the corresponding RichBasicBlock
<41> (succs: 92 42 ) is white, visiting it first
basic block 40 is a predecessor
got the corresponding RichBasicBlock
0x16a6c10 is red
0x16a6d40 is red
basic block 90 is a predecessor
got the corresponding RichBasicBlock
<90> (succs: 91 92 ) is white, visiting it first
basic block 42 is a predecessor
got the corresponding RichBasicBlock
<42> (succs: 90 43 ) is white, visiting it first
basic block 41 is a predecessor
got the corresponding RichBasicBlock
0x16a6d40 is red
0x16a6e70 is red
basic block 88 is a predecessor
got the corresponding RichBasicBlock
<88> (succs: 89 90 ) is white, visiting it first
basic block 43 is a predecessor
got the corresponding RichBasicBlock
<43> (succs: 88 44 ) is white, visiting it first
basic block 42 is a predecessor
got the corresponding RichBasicBlock
0x16a6e70 is red
0x16a6fa0 is red
basic block 87 is a predecessor
got the corresponding RichBasicBlock
<87> (succs: 88 ) is white, visiting it first
basic block 44 is a predecessor
got the corresponding RichBasicBlock
<44> (succs: 87 45 ) is white, visiting it first
basic block 43 is a predecessor
got the corresponding RichBasicBlock
0x16a6fa0 is red
0x16a70d0 is red
basic block 85 is a predecessor
got the corresponding RichBasicBlock
<85> (succs: 86 87 ) is white, visiting it first
basic block 45 is a predecessor
got the corresponding RichBasicBlock
<45> (succs: 85 46 ) is white, visiting it first
basic block 44 is a predecessor
got the corresponding RichBasicBlock
0x16a70d0 is red
0x169fd50 is red
basic block 48 is a predecessor
got the corresponding RichBasicBlock
<48> (succs: 85 ) is white, visiting it first
basic block 47 is a predecessor
got the corresponding RichBasicBlock
<47> (succs: 48 49 ) is white, visiting it first
basic block 46 is a predecessor
got the corresponding RichBasicBlock
<46> (succs: 47 49 ) is white, visiting it first
basic block 45 is a predecessor
got the corresponding RichBasicBlock
0x169fd50 is red
0x169fe80 is red
0x169ffb0 is red
0x16a00e0 is red
basic block 83 is a predecessor
got the corresponding RichBasicBlock
<83> (succs: 84 85 ) is white, visiting it first
basic block 63 is a predecessor
got the corresponding RichBasicBlock
<63> (succs: 83 64 ) is white, visiting it first
basic block 58 is a predecessor
got the corresponding RichBasicBlock
<58> (succs: 63 ) is white, visiting it first
basic block 57 is a predecessor
got the corresponding RichBasicBlock
<57> (succs: 58 59 ) is white, visiting it first
basic block 55 is a predecessor
got the corresponding RichBasicBlock
<55> (succs: 56 57 ) is white, visiting it first
basic block 53 is a predecessor
got the corresponding RichBasicBlock
<53> (succs: 54 55 ) is white, visiting it first
basic block 52 is a predecessor
got the corresponding RichBasicBlock
<52> (succs: 53 ) is white, visiting it first
basic block 51 is a predecessor
got the corresponding RichBasicBlock
<51> (succs: 53 52 ) is white, visiting it first
basic block 50 is a predecessor
got the corresponding RichBasicBlock
<50> (succs: 51 ) is white, visiting it first
basic block 49 is a predecessor
got the corresponding RichBasicBlock
<49> (succs: 51 50 ) is white, visiting it first
basic block 46 is a predecessor
got the corresponding RichBasicBlock
0x169fe80 is red
basic block 47 is a predecessor
got the corresponding RichBasicBlock
0x169ffb0 is red
0x16a01c0 is red
0x16a02f0 is red
basic block 49 is a predecessor
got the corresponding RichBasicBlock
0x16a01c0 is red
0x16a03d0 is red
0x16a0500 is red
basic block 51 is a predecessor
got the corresponding RichBasicBlock
0x16a03d0 is red
0x16a05e0 is red
basic block 54 is a predecessor
got the corresponding RichBasicBlock
<54> (succs: 55 ) is white, visiting it first
basic block 53 is a predecessor
got the corresponding RichBasicBlock
0x16a05e0 is red
0x16a0710 is red
0x16a07f0 is red
basic block 56 is a predecessor
got the corresponding RichBasicBlock
<56> (succs: 57 ) is white, visiting it first
basic block 55 is a predecessor
got the corresponding RichBasicBlock
0x16a07f0 is red
0x16a0920 is red
0x16a0a00 is red
0x16a0b30 is red
basic block 62 is a predecessor
got the corresponding RichBasicBlock
<62> (succs: 63 ) is white, visiting it first
basic block 60 is a predecessor
got the corresponding RichBasicBlock
<60> (succs: 62 ) is white, visiting it first
basic block 59 is a predecessor
got the corresponding RichBasicBlock
<59> (succs: 60 61 ) is white, visiting it first
basic block 57 is a predecessor
got the corresponding RichBasicBlock
0x16a0a00 is red
0x16a0c10 is red
0x15f8020 is red
basic block 61 is a predecessor
got the corresponding RichBasicBlock
<61> (succs: 62 ) is white, visiting it first
basic block 59 is a predecessor
got the corresponding RichBasicBlock
0x16a0c10 is red
0x15f8100 is red
0x15f81e0 is red
0x15f82c0 is red
basic block 68 is a predecessor
got the corresponding RichBasicBlock
<68> (succs: 83 ) is white, visiting it first
basic block 67 is a predecessor
got the corresponding RichBasicBlock
<67> (succs: 68 69 ) is white, visiting it first
basic block 65 is a predecessor
got the corresponding RichBasicBlock
<65> (succs: 67 ) is white, visiting it first
basic block 64 is a predecessor
got the corresponding RichBasicBlock
<64> (succs: 65 66 ) is white, visiting it first
basic block 63 is a predecessor
got the corresponding RichBasicBlock
0x15f82c0 is red
0x15f83f0 is red
0x15f8520 is red
basic block 66 is a predecessor
got the corresponding RichBasicBlock
<66> (succs: 67 ) is white, visiting it first
basic block 64 is a predecessor
got the corresponding RichBasicBlock
0x15f83f0 is red
0x15f8600 is red
0x15f86e0 is red
0x15f8810 is red
0x15f9710 is red
basic block 84 is a predecessor
got the corresponding RichBasicBlock
<84> (succs: 85 ) is white, visiting it first
basic block 83 is a predecessor
got the corresponding RichBasicBlock
0x15f9710 is red
0x1661d50 is red
0x1661e30 is red
basic block 86 is a predecessor
got the corresponding RichBasicBlock
<86> (succs: 87 ) is white, visiting it first
basic block 85 is a predecessor
got the corresponding RichBasicBlock
0x1661e30 is red
0x1661f60 is red
0x1662040 is red
0x1662120 is red
basic block 89 is a predecessor
got the corresponding RichBasicBlock
<89> (succs: 90 ) is white, visiting it first
basic block 88 is a predecessor
got the corresponding RichBasicBlock
0x1662120 is red
0x1662250 is red
0x1662330 is red
basic block 91 is a predecessor
got the corresponding RichBasicBlock
<91> (succs: 92 ) is white, visiting it first
basic block 90 is a predecessor
got the corresponding RichBasicBlock
0x1662330 is red
0x1662460 is red
0x1662540 is red
0x1662620 is red
0x1662700 is red
0x16627e0 is red
0x16628c0 is red
0x16629a0 is red
0x1662a80 is red
0x1662bb0 is red
basic block 98 is a predecessor
got the corresponding RichBasicBlock
0x1662a80 is red
0x1662c90 is red
0x1662dc0 is red
basic block 100 is a predecessor
got the corresponding RichBasicBlock
0x1662c90 is red
0x1662ea0 is red
basic block 103 is a predecessor
got the corresponding RichBasicBlock
<103> (succs: 104 ) is white, visiting it first
basic block 102 is a predecessor
got the corresponding RichBasicBlock
0x1662ea0 is red
0x1662fd0 is red
0x16630b0 is red
0x1663190 is red
0x1663270 is red
0x1663350 is red
basic block 82 is a predecessor
got the corresponding RichBasicBlock
<82> (succs: 108 ) is white, visiting it first
basic block 80 is a predecessor
got the corresponding RichBasicBlock
<80> (succs: 81 82 ) is white, visiting it first
basic block 69 is a predecessor
got the corresponding RichBasicBlock
<69> (succs: 70 80 ) is white, visiting it first
basic block 67 is a predecessor
got the corresponding RichBasicBlock
0x15f86e0 is red
0x15f88f0 is red
basic block 79 is a predecessor
got the corresponding RichBasicBlock
<79> (succs: 80 ) is white, visiting it first
basic block 77 is a predecessor
got the corresponding RichBasicBlock
<77> (succs: 79 ) is white, visiting it first
basic block 73 is a predecessor
got the corresponding RichBasicBlock
<73> (succs: 74 77 ) is white, visiting it first
basic block 72 is a predecessor
got the corresponding RichBasicBlock
<72> (succs: 73 78 ) is white, visiting it first
basic block 70 is a predecessor
got the corresponding RichBasicBlock
<70> (succs: 72 71 ) is white, visiting it first
basic block 69 is a predecessor
got the corresponding RichBasicBlock
0x15f88f0 is red
0x15f8a20 is red
basic block 71 is a predecessor
got the corresponding RichBasicBlock
<71> (succs: 72 ) is white, visiting it first
basic block 70 is a predecessor
got the corresponding RichBasicBlock
0x15f8a20 is red
0x15f8b50 is red
0x15f8c30 is red
0x15f8d60 is red
basic block 76 is a predecessor
got the corresponding RichBasicBlock
<76> (succs: 77 ) is white, visiting it first
basic block 74 is a predecessor
got the corresponding RichBasicBlock
<74> (succs: 75 76 ) is white, visiting it first
basic block 73 is a predecessor
got the corresponding RichBasicBlock
0x15f8d60 is red
0x15f8e90 is red
basic block 75 is a predecessor
got the corresponding RichBasicBlock
<75> (succs: 76 ) is white, visiting it first
basic block 74 is a predecessor
got the corresponding RichBasicBlock
0x15f8e90 is red
0x15f8fc0 is red
0x15f90a0 is red
0x15f9180 is red
basic block 78 is a predecessor
got the corresponding RichBasicBlock
<78> (succs: 79 ) is white, visiting it first
basic block 72 is a predecessor
got the corresponding RichBasicBlock
0x15f8c30 is red
0x15f9260 is red
0x15f9340 is red
0x15f9420 is red
basic block 81 is a predecessor
got the corresponding RichBasicBlock
<81> (succs: 82 ) is white, visiting it first
basic block 80 is a predecessor
got the corresponding RichBasicBlock
0x15f9420 is red
0x15f9550 is red
0x15f9630 is red
0x1625480 is red
0x16255b0 is red
0x1626ca0 is red
0x17110b0 is red
basic block 111 is a predecessor
Stuck in a loop, abandoning this path
0x16258a0 is red
basic block 132 is a predecessor
got the corresponding RichBasicBlock
0x1626ca0 is red
0x16259d0 is red
basic block 110 is a predecessor
got the corresponding RichBasicBlock
<110> (succs: 114 ) is white, visiting it first
basic block 109 is a predecessor
got the corresponding RichBasicBlock
0x16255b0 is red
0x16256e0 is red
0x1625ab0 is red
basic block 115 is a predecessor
got the corresponding RichBasicBlock
<115> (succs: 116 ) is white, visiting it first
basic block 114 is a predecessor
got the corresponding RichBasicBlock
0x1625ab0 is red
0x1625be0 is red
0x1625cc0 is red
basic block 117 is a predecessor
got the corresponding RichBasicBlock
<117> (succs: 118 ) is white, visiting it first
basic block 116 is a predecessor
got the corresponding RichBasicBlock
0x1625cc0 is red
0x1625df0 is red
These are all the basic blocks:
<3> (succs: 6 4 )
<4> (succs: 6 5 )
<6> (succs: 8 7 )
<8> (succs: 131 9 )
<9> (succs: 131 10 )
<10> (succs: 131 11 )
<11> (succs: 131 12 )
<12> (succs: 13 14 )
<13> (succs: 131 14 )
<14> (succs: 16 15 )
<16> (succs: 131 17 )
<17> (succs: 131 15 )
<19> (succs: 107 20 )
<22> (succs: 23 21 )
<23> (succs: 24 21 )
<24> (succs: 106 21 )
<26> (succs: 105 27 )
<30> (succs: 31 )
<31> (succs: 32 34 )
<33> (succs: 100 )
<35> (succs: 98 36 )
<36> (succs: 97 37 )
<37> (succs: 96 38 )
<38> (succs: 95 39 )
<39> (succs: 94 40 )
<40> (succs: 93 41 )
<41> (succs: 92 42 )
<42> (succs: 90 43 )
<43> (succs: 88 44 )
<44> (succs: 87 45 )
<45> (succs: 85 46 )
<46> (succs: 47 49 )
<47> (succs: 48 49 )
<48> (succs: 85 )
<49> (succs: 51 50 )
<51> (succs: 53 52 )
<53> (succs: 54 55 )
<54> (succs: 55 )
<55> (succs: 56 57 )
<58> (succs: 63 )
<59> (succs: 60 61 )
<60> (succs: 62 )
<61> (succs: 62 )
<62> (succs: 63 )
<63> (succs: 83 64 )
<64> (succs: 65 66 )
<65> (succs: 67 )
<66> (succs: 67 )
<67> (succs: 68 69 )
<68> (succs: 83 )
<69> (succs: 70 80 )
<70> (succs: 72 71 )
<71> (succs: 72 )
<72> (succs: 73 78 )
<73> (succs: 74 77 )
<77> (succs: 79 )
<78> (succs: 79 )
<79> (succs: 80 )
<80> (succs: 81 82 )
<81> (succs: 82 )
<82> (succs: 108 )
<83> (succs: 84 85 )
<84> (succs: 85 )
<85> (succs: 86 87 )
<86> (succs: 87 )
<87> (succs: 88 )
<88> (succs: 89 90 )
<89> (succs: 90 )
<90> (succs: 91 92 )
<91> (succs: 92 )
<92> (succs: 93 )
<93> (succs: 94 )
<94> (succs: 95 )
<95> (succs: 96 )
<96> (succs: 97 )
<97> (succs: 98 )
<98> (succs: 99 100 )
<100> (succs: 101 102 )
<101> (succs: 102 )
<105> (succs: 106 )
<106> (succs: 107 )
<107> (succs: 108 )
<108> (succs: 109 128 )
<109> (succs: 132 110 )
<115> (succs: 116 )
<116> (succs: 117 118 )
<117> (succs: 118 )
<118> (succs: 119 120 )
<119> (succs: 120 )
<120> (succs: 122 121 )
<122> (succs: 123 121 )
<127> (succs: 130 )
<129> (succs: 130 )
<130> (succs: 1 )
<20> (succs: 22 21 )
<29> (succs: 30 31 )
<27> (succs: 28 29 )
<28> (succs: 29 )
<32> (succs: 33 34 )
<56> (succs: 57 )
<57> (succs: 58 59 )
<74> (succs: 75 76 )
<75> (succs: 76 )
<76> (succs: 77 )
<99> (succs: 100 )
<102> (succs: 103 104 )
<103> (succs: 104 )
<104> (succs: 105 )
<114> (succs: 115 116 )
<110> (succs: 114 )
<123> (succs: 124 125 )
<124> (succs: 125 )
<125> (succs: 126 121 )
<126> (succs: 127 )
<132> (succs: 133 113 )
(Loop header) <112> (succs: 111 113 )
<7> (succs: 8 )
<131> (succs: 129 )
<15> (succs: 18 19 )
<18> (succs: 107 )
<21> (succs: 25 26 )
<25> (succs: 106 )
<34> (succs: 98 35 )
<128> (succs: 129 )
<111> (succs: 112 )
<113> (succs: 114 )
<121> (succs: 127 )
<133> (succs: 112 )
<5> (succs: 6 )
<50> (succs: 51 )
<52> (succs: 53 )
<0> (succs: 2 )
<1> (succs: )
<2> (succs: 3 8 )
These are the basic blocks from the interesting subgraph:

Starting the walk until <118> (succs: 119 120 )
Configuration created, _constraints size: 0
Reached <0> (succs: 2 )
Handled all statements
----------------------
Result of the analysis
paths found: 0
paths rejected: 1
----------------------

