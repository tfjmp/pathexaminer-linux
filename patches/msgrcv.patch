diff --git a/linux/config b/linux/config
new file mode 100644
index 0000000..4e81f00
--- /dev/null
+++ b/linux/config
@@ -0,0 +1,8 @@
+general:
+  url:
+    dbfile: ./linux-v4.3.db
+    dbname: global_symbols
+  greedy: 0
+
+ipc/msg.c:
+  functions: [SYSC_msgrcv]
diff --git a/linux/include/linux/err.h b/linux/include/linux/err.h
index a729120..59e3c88 100644
--- a/linux/include/linux/err.h
+++ b/linux/include/linux/err.h
@@ -20,22 +20,22 @@
 
 #define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)
 
-static inline void * __must_check ERR_PTR(long error)
+__attribute__((always_inline)) static inline void * __must_check ERR_PTR(long error)
 {
 	return (void *) error;
 }
 
-static inline long __must_check PTR_ERR(__force const void *ptr)
+__attribute__((always_inline)) static inline long __must_check PTR_ERR(__force const void *ptr)
 {
 	return (long) ptr;
 }
 
-static inline bool __must_check IS_ERR(__force const void *ptr)
+__attribute__((always_inline)) static inline bool __must_check IS_ERR(__force const void *ptr)
 {
 	return IS_ERR_VALUE((unsigned long)ptr);
 }
 
-static inline bool __must_check IS_ERR_OR_NULL(__force const void *ptr)
+__attribute__((always_inline)) static inline bool __must_check IS_ERR_OR_NULL(__force const void *ptr)
 {
 	return !ptr || IS_ERR_VALUE((unsigned long)ptr);
 }
@@ -47,13 +47,13 @@ static inline bool __must_check IS_ERR_OR_NULL(__force const void *ptr)
  * Explicitly cast an error-valued pointer to another pointer type in such a
  * way as to make it clear that's what's going on.
  */
-static inline void * __must_check ERR_CAST(__force const void *ptr)
+__attribute__((always_inline)) static inline void * __must_check ERR_CAST(__force const void *ptr)
 {
 	/* cast away the const */
 	return (void *) ptr;
 }
 
-static inline int __must_check PTR_ERR_OR_ZERO(__force const void *ptr)
+__attribute__((always_inline)) static inline int __must_check PTR_ERR_OR_ZERO(__force const void *ptr)
 {
 	if (IS_ERR(ptr))
 		return PTR_ERR(ptr);
diff --git a/linux/ipc/msg.c b/linux/ipc/msg.c
index 1471db9..30af127 100644
--- a/linux/ipc/msg.c
+++ b/linux/ipc/msg.c
@@ -41,6 +41,28 @@
 #include <asm/current.h>
 #include <linux/uaccess.h>
 #include "util.h"
+#include <linux/mm.h>
+#include <linux/shm.h>
+#include <linux/init.h>
+#include <linux/msg.h>
+#include <linux/vmalloc.h>
+#include <linux/slab.h>
+#include <linux/notifier.h>
+#include <linux/capability.h>
+#include <linux/highuid.h>
+#include <linux/security.h>
+#include <linux/rcupdate.h>
+#include <linux/workqueue.h>
+#include <linux/seq_file.h>
+#include <linux/proc_fs.h>
+#include <linux/audit.h>
+#include <linux/nsproxy.h>
+#include <linux/rwsem.h>
+#include <linux/memory.h>
+#include <linux/ipc_namespace.h>
+
+#include <asm/unistd.h>
+
 
 /* one msg_receiver structure for each sleeping receiver */
 struct msg_receiver {
@@ -798,7 +820,7 @@ static inline void free_copy(struct msg_msg *copy)
 }
 #endif
 
-static struct msg_msg *find_msg(struct msg_queue *msq, long *msgtyp, int mode)
+__attribute__((always_inline)) static struct msg_msg *find_msg(struct msg_queue *msq, long *msgtyp, int mode)
 {
 	struct msg_msg *msg, *found = NULL;
 	long count = 0;
@@ -821,8 +843,39 @@ static struct msg_msg *find_msg(struct msg_queue *msq, long *msgtyp, int mode)
 
 	return found ?: ERR_PTR(-EAGAIN);
 }
+/**
+ * ipcperms - check ipc permissions
+ * @ns: ipc namespace
+ * @ipcp: ipc permission set
+ * @flag: desired permission set
+ *
+ * Check user, group, other permissions for access
+ * to ipc resources. return 0 if allowed
+ *
+ * @flag will most probably be 0 or S_...UGO from <linux/stat.h>
+ */
+__attribute__((always_inline)) int ipcperms(struct ipc_namespace *ns, struct kern_ipc_perm *ipcp, short flag)
+{
+	kuid_t euid = current_euid();
+	int requested_mode, granted_mode;
+
+	audit_ipc_obj(ipcp);
+	requested_mode = (flag >> 6) | (flag >> 3) | flag;
+	granted_mode = ipcp->mode;
+	if (uid_eq(euid, ipcp->cuid) ||
+	    uid_eq(euid, ipcp->uid))
+		granted_mode >>= 6;
+	else if (in_group_p(ipcp->cgid) || in_group_p(ipcp->gid))
+		granted_mode >>= 3;
+	/* is there some bit set in requested_mode but not in granted_mode? */
+	if ((requested_mode & ~granted_mode & 0007) &&
+	    !ns_capable(ns->user_ns, CAP_IPC_OWNER))
+		return -1;
+
+	return security_ipc_permission(ipcp, flag);
+}
 
-long do_msgrcv(int msqid, void __user *buf, size_t bufsz, long msgtyp, int msgflg,
+__attribute__((always_inline)) long do_msgrcv(int msqid, void __user *buf, size_t bufsz, long msgtyp, int msgflg,
 	       long (*msg_handler)(void __user *, struct msg_msg *, size_t))
 {
 	int mode;
diff --git a/linux/linux-v4.3.db b/linux/linux-v4.3.db
new file mode 100644
index 0000000..9e3a3f3
Binary files /dev/null and b/linux/linux-v4.3.db differ
