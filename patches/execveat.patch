diff --git a/linux/config b/linux/config
new file mode 100644
index 0000000..2d02bb5
--- /dev/null
+++ b/linux/config
@@ -0,0 +1,8 @@
+general:
+  url:
+    dbfile: ./linux-v4.3.db
+    dbname: global_symbols
+  greedy: 0
+
+fs/exec.c:
+  functions: [SYSC_execve, SYSC_execveat]
diff --git a/linux/fs/exec.c b/linux/fs/exec.c
index b06623a..1f92fb2 100644
--- a/linux/fs/exec.c
+++ b/linux/fs/exec.c
@@ -1218,7 +1218,7 @@ EXPORT_SYMBOL(bprm_change_interp);
 /*
  * install the new credentials for this executable
  */
-void install_exec_creds(struct linux_binprm *bprm)
+__attribute__((always_inline)) void install_exec_creds(struct linux_binprm *bprm)
 {
 	security_bprm_committing_creds(bprm);
 
@@ -1337,7 +1337,7 @@ static void bprm_fill_uid(struct linux_binprm *bprm)
  *
  * This may be called multiple times for binary chains (scripts for example).
  */
-int prepare_binprm(struct linux_binprm *bprm)
+__attribute__((always_inline)) int prepare_binprm(struct linux_binprm *bprm)
 {
 	int retval;
 
@@ -1403,7 +1403,7 @@ EXPORT_SYMBOL(remove_arg_zero);
 /*
  * cycle the list of binary formats handler, until one recognizes the image
  */
-int search_binary_handler(struct linux_binprm *bprm)
+__attribute__((always_inline)) int search_binary_handler(struct linux_binprm *bprm)
 {
 	bool need_retry = IS_ENABLED(CONFIG_MODULES);
 	struct linux_binfmt *fmt;
@@ -1456,7 +1456,7 @@ int search_binary_handler(struct linux_binprm *bprm)
 }
 EXPORT_SYMBOL(search_binary_handler);
 
-static int exec_binprm(struct linux_binprm *bprm)
+__attribute__((always_inline)) static int exec_binprm(struct linux_binprm *bprm)
 {
 	pid_t old_pid, old_vpid;
 	int ret;
@@ -1481,7 +1481,7 @@ static int exec_binprm(struct linux_binprm *bprm)
 /*
  * sys_execve() executes a new program.
  */
-static int do_execveat_common(int fd, struct filename *filename,
+__attribute__((always_inline)) static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
 			      int flags)
@@ -1625,7 +1625,7 @@ out_ret:
 	return retval;
 }
 
-int do_execve(struct filename *filename,
+__attribute__((always_inline)) int do_execve(struct filename *filename,
 	const char __user *const __user *__argv,
 	const char __user *const __user *__envp)
 {
@@ -1634,7 +1634,7 @@ int do_execve(struct filename *filename,
 	return do_execveat_common(AT_FDCWD, filename, argv, envp, 0);
 }
 
-int do_execveat(int fd, struct filename *filename,
+__attribute__((always_inline)) int do_execveat(int fd, struct filename *filename,
 		const char __user *const __user *__argv,
 		const char __user *const __user *__envp,
 		int flags)
diff --git a/linux/include/linux/err.h b/linux/include/linux/err.h
index a729120..59e3c88 100644
--- a/linux/include/linux/err.h
+++ b/linux/include/linux/err.h
@@ -20,22 +20,22 @@
 
 #define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)
 
-static inline void * __must_check ERR_PTR(long error)
+__attribute__((always_inline)) static inline void * __must_check ERR_PTR(long error)
 {
 	return (void *) error;
 }
 
-static inline long __must_check PTR_ERR(__force const void *ptr)
+__attribute__((always_inline)) static inline long __must_check PTR_ERR(__force const void *ptr)
 {
 	return (long) ptr;
 }
 
-static inline bool __must_check IS_ERR(__force const void *ptr)
+__attribute__((always_inline)) static inline bool __must_check IS_ERR(__force const void *ptr)
 {
 	return IS_ERR_VALUE((unsigned long)ptr);
 }
 
-static inline bool __must_check IS_ERR_OR_NULL(__force const void *ptr)
+__attribute__((always_inline)) static inline bool __must_check IS_ERR_OR_NULL(__force const void *ptr)
 {
 	return !ptr || IS_ERR_VALUE((unsigned long)ptr);
 }
@@ -47,13 +47,13 @@ static inline bool __must_check IS_ERR_OR_NULL(__force const void *ptr)
  * Explicitly cast an error-valued pointer to another pointer type in such a
  * way as to make it clear that's what's going on.
  */
-static inline void * __must_check ERR_CAST(__force const void *ptr)
+__attribute__((always_inline)) static inline void * __must_check ERR_CAST(__force const void *ptr)
 {
 	/* cast away the const */
 	return (void *) ptr;
 }
 
-static inline int __must_check PTR_ERR_OR_ZERO(__force const void *ptr)
+__attribute__((always_inline)) static inline int __must_check PTR_ERR_OR_ZERO(__force const void *ptr)
 {
 	if (IS_ERR(ptr))
 		return PTR_ERR(ptr);
diff --git a/linux/linux-v4.3.db b/linux/linux-v4.3.db
new file mode 100644
index 0000000..9e3a3f3
Binary files /dev/null and b/linux/linux-v4.3.db differ
