kernel/fork.c:1699:37: attention : always_inline function might not be inlinable [-Wattributes]
 __attribute__((always_inline)) long _do_fork(unsigned long clone_flags,
                                     ^
kernel/fork.c:1246:59: attention : always_inline function might not be inlinable [-Wattributes]
 __attribute__((always_inline)) static struct task_struct *copy_process(unsigned long clone_flags,
                                                           ^
Building the rich basic blocks
About to build basic block 0
is it a loop? false
Building a regular RichBasicBlock 0
About to build basic block 2
is it a loop? false
Building a regular RichBasicBlock 2
    has flow: false    has LSM: false
About to build basic block 3
is it a loop? false
Building a regular RichBasicBlock 3
    has flow: false    has LSM: false
About to build basic block 4
is it a loop? false
Building a regular RichBasicBlock 4
GIMPLE CALL
GIMPLE CALL with a decl
name: security_task_create	isLSM: true	isFlow: false
    has flow: false    has LSM: true
About to build basic block 5
is it a loop? false
Building a regular RichBasicBlock 5
    has flow: false    has LSM: false
About to build basic block 6
is it a loop? false
Building a regular RichBasicBlock 6
GIMPLE CALL
GIMPLE CALL with a decl
name: dup_task_struct	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 7
is it a loop? false
Building a regular RichBasicBlock 7
    has flow: false    has LSM: false
About to build basic block 8
is it a loop? false
Building a regular RichBasicBlock 8
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_creds	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 9
is it a loop? false
Building a regular RichBasicBlock 9
    has flow: false    has LSM: false
About to build basic block 10
is it a loop? false
Building a regular RichBasicBlock 10
GIMPLE CALL
GIMPLE CALL with a decl
name: capable	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 11
is it a loop? false
Building a regular RichBasicBlock 11
GIMPLE CALL
GIMPLE CALL with a decl
name: capable	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 12
is it a loop? false
Building a regular RichBasicBlock 12
    has flow: false    has LSM: false
About to build basic block 13
is it a loop? false
Building a regular RichBasicBlock 13
    has flow: false    has LSM: false
About to build basic block 14
is it a loop? false
Building a regular RichBasicBlock 14
    has flow: false    has LSM: false
About to build basic block 15
is it a loop? false
Building a regular RichBasicBlock 15
GIMPLE CALL
GIMPLE CALL with a decl
name: __delayacct_tsk_init	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 16
is it a loop? false
Building a regular RichBasicBlock 16
GIMPLE CALL
GIMPLE CALL with a decl
name: memset	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: memset	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: acct_clear_integrals	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: posix_cpu_timers_init	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: ktime_get	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: ktime_get_with_offset	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: cgroup_fork	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 17
is it a loop? false
Building a regular RichBasicBlock 17
GIMPLE CALL
GIMPLE CALL with a decl
name: __mpol_dup	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 18
is it a loop? false
Building a regular RichBasicBlock 18
    has flow: false    has LSM: false
About to build basic block 19
is it a loop? false
Building a regular RichBasicBlock 19
GIMPLE CALL
GIMPLE CALL with a decl
name: sched_fork	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 20
is it a loop? false
Building a regular RichBasicBlock 20
GIMPLE CALL
GIMPLE CALL with a decl
name: perf_event_init_task	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 21
is it a loop? false
Building a regular RichBasicBlock 21
GIMPLE CALL
GIMPLE CALL with a decl
name: audit_alloc	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 22
is it a loop? false
Building a regular RichBasicBlock 22
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_semundo	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 23
is it a loop? false
Building a regular RichBasicBlock 23
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_files	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 24
is it a loop? false
Building a regular RichBasicBlock 24
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_fs	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 25
is it a loop? false
Building a regular RichBasicBlock 25
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_sighand	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 26
is it a loop? false
Building a regular RichBasicBlock 26
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_signal	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 27
is it a loop? false
Building a regular RichBasicBlock 27
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_mm	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 28
is it a loop? false
Building a regular RichBasicBlock 28
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_namespaces	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 29
is it a loop? false
Building a regular RichBasicBlock 29
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_io	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 30
is it a loop? false
Building a regular RichBasicBlock 30
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_thread_tls	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 31
is it a loop? false
Building a regular RichBasicBlock 31
    has flow: false    has LSM: false
About to build basic block 32
is it a loop? false
Building a regular RichBasicBlock 32
GIMPLE CALL
GIMPLE CALL with a decl
name: alloc_pid	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 33
is it a loop? false
Building a regular RichBasicBlock 33
    has flow: false    has LSM: false
About to build basic block 34
is it a loop? false
Building a regular RichBasicBlock 34
GIMPLE CALL
GIMPLE CALL with a decl
name: user_disable_single_step	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: clear_tsk_thread_flag	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: clear_tsk_thread_flag	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 35
is it a loop? false
Building a regular RichBasicBlock 35
    has flow: false    has LSM: false
About to build basic block 36
is it a loop? false
Building a regular RichBasicBlock 36
GIMPLE CALL
GIMPLE CALL with a decl
name: cgroup_can_fork	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 37
is it a loop? false
Building a regular RichBasicBlock 37
GIMPLE CALL
GIMPLE CALL with a decl
name: _raw_write_lock_irq	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: _raw_spin_lock	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: copy_seccomp	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: recalc_sigpending	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: signal_pending	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 38
is it a loop? false
Building a regular RichBasicBlock 38
GIMPLE CALL
GIMPLE CALL with a decl
name: cgroup_cancel_fork	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 39
is it a loop? false
Building a regular RichBasicBlock 39
    has flow: false    has LSM: false
About to build basic block 40
is it a loop? false
Building a regular RichBasicBlock 40
GIMPLE CALL
GIMPLE CALL with a decl
name: ptrace_init_task	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 41
is it a loop? false
Building a regular RichBasicBlock 41
    has flow: false    has LSM: false
About to build basic block 42
is it a loop? false
Building a regular RichBasicBlock 42
    has flow: false    has LSM: false
About to build basic block 43
is it a loop? false
Building a regular RichBasicBlock 43
    has flow: false    has LSM: false
About to build basic block 44
is it a loop? false
Building a regular RichBasicBlock 44
    has flow: false    has LSM: false
About to build basic block 45
is it a loop? false
Building a regular RichBasicBlock 45
GIMPLE CALL
GIMPLE CALL with a decl
name: tty_kref_get	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: attach_pid	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: attach_pid	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 46
is it a loop? false
Building a regular RichBasicBlock 46
    has flow: false    has LSM: false
About to build basic block 47
is it a loop? false
Building a regular RichBasicBlock 47
GIMPLE CALL
GIMPLE CALL with a decl
name: attach_pid	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 48
is it a loop? false
Building a regular RichBasicBlock 48
GIMPLE CALL
GIMPLE CALL with a decl
name: syscall_tracepoint_update	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: proc_fork_connector	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: cgroup_post_fork	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: perf_event_fork	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: trace_task_newtask	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 49
is it a loop? false
Building a regular RichBasicBlock 49
    has flow: false    has LSM: false
About to build basic block 50
is it a loop? false
Building a regular RichBasicBlock 50
GIMPLE CALL
GIMPLE CALL with a decl
name: free_pid	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 51
is it a loop? false
Building a regular RichBasicBlock 51
    has flow: false    has LSM: false
About to build basic block 52
is it a loop? false
Building a regular RichBasicBlock 52
GIMPLE CALL
GIMPLE CALL with a decl
name: exit_io_context	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 53
is it a loop? false
Building a regular RichBasicBlock 53
GIMPLE CALL
GIMPLE CALL with a decl
name: exit_task_namespaces	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 54
is it a loop? false
Building a regular RichBasicBlock 54
    has flow: false    has LSM: false
About to build basic block 55
is it a loop? false
Building a regular RichBasicBlock 55
GIMPLE CALL
GIMPLE CALL with a decl
name: mmput	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 56
is it a loop? false
Building a regular RichBasicBlock 56
GIMPLE CALL
GIMPLE CALL with a decl
name: free_signal_struct	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 57
is it a loop? false
Building a regular RichBasicBlock 57
GIMPLE CALL
GIMPLE CALL with a decl
name: __cleanup_sighand	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 58
is it a loop? false
Building a regular RichBasicBlock 58
GIMPLE CALL
GIMPLE CALL with a decl
name: exit_fs	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 59
is it a loop? false
Building a regular RichBasicBlock 59
GIMPLE CALL
GIMPLE CALL with a decl
name: exit_files	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 60
is it a loop? false
Building a regular RichBasicBlock 60
GIMPLE CALL
GIMPLE CALL with a decl
name: exit_sem	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 61
is it a loop? false
Building a regular RichBasicBlock 61
    has flow: false    has LSM: false
About to build basic block 62
is it a loop? false
Building a regular RichBasicBlock 62
GIMPLE CALL
GIMPLE CALL with a decl
name: __audit_free	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 63
is it a loop? false
Building a regular RichBasicBlock 63
GIMPLE CALL
GIMPLE CALL with a decl
name: perf_event_free_task	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 64
is it a loop? false
Building a regular RichBasicBlock 64
    has flow: false    has LSM: false
About to build basic block 65
is it a loop? false
Building a regular RichBasicBlock 65
GIMPLE CALL
GIMPLE CALL with a decl
name: __mpol_put	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 66
is it a loop? false
Building a regular RichBasicBlock 66
    has flow: false    has LSM: false
About to build basic block 67
is it a loop? false
Building a regular RichBasicBlock 67
GIMPLE CALL
GIMPLE CALL with a decl
name: kmem_cache_free	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 68
is it a loop? false
Building a regular RichBasicBlock 68
    has flow: false    has LSM: false
About to build basic block 69
is it a loop? false
Building a regular RichBasicBlock 69
GIMPLE CALL
GIMPLE CALL with a decl
name: exit_creds	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 70
is it a loop? false
Building a regular RichBasicBlock 70
GIMPLE CALL
GIMPLE CALL with a decl
name: free_task	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 71
is it a loop? false
Building a regular RichBasicBlock 71
    has flow: false    has LSM: false
About to build basic block 72
is it a loop? false
Building a regular RichBasicBlock 72
    has flow: false    has LSM: false
About to build basic block 73
is it a loop? false
Building a regular RichBasicBlock 73
    has flow: false    has LSM: false
About to build basic block 74
is it a loop? false
Building a regular RichBasicBlock 74
    has flow: false    has LSM: false
About to build basic block 75
is it a loop? true
Building a regular RichBasicBlock 75
    has flow: false    has LSM: false
About to build basic block 76
is it a loop? true
Building a loop header pseudo-basic block
Building a regular RichBasicBlock 76
GIMPLE CALL
    has flow: false    has LSM: false
Loop added for basic_block 76
About to build basic block 77
is it a loop? false
Building a regular RichBasicBlock 77
    has flow: false    has LSM: false
About to build basic block 78
is it a loop? false
Building a regular RichBasicBlock 78
GIMPLE CALL
GIMPLE CALL with a decl
name: get_task_pid	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: pid_vnr	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: __init_waitqueue_head	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: kayrebt_FlowNodeMarker	isLSM: false	isFlow: true
GIMPLE CALL
GIMPLE CALL with a decl
name: wake_up_new_task	isLSM: false	isFlow: true
    has flow: true    has LSM: false
About to build basic block 79
is it a loop? false
Building a regular RichBasicBlock 79
GIMPLE CALL
GIMPLE CALL with a decl
name: ptrace_event_pid	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 80
is it a loop? false
Building a regular RichBasicBlock 80
GIMPLE CALL
GIMPLE CALL with a decl
name: wait_for_vfork_done	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 81
is it a loop? false
Building a regular RichBasicBlock 81
    has flow: false    has LSM: false
About to build basic block 82
is it a loop? false
Building a regular RichBasicBlock 82
GIMPLE CALL
GIMPLE CALL with a decl
name: task_active_pid_ns	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 83
is it a loop? false
Building a regular RichBasicBlock 83
GIMPLE CALL
GIMPLE CALL with a decl
name: pid_nr_ns	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 84
is it a loop? false
Building a regular RichBasicBlock 84
    has flow: false    has LSM: false
About to build basic block 85
is it a loop? false
Building a regular RichBasicBlock 85
GIMPLE CALL
GIMPLE CALL with a decl
name: ptrace_notify	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 86
is it a loop? false
Building a regular RichBasicBlock 86
GIMPLE CALL
GIMPLE CALL with a decl
name: put_pid	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 87
is it a loop? false
Building a regular RichBasicBlock 87
    has flow: false    has LSM: false
About to build basic block 88
is it a loop? false
Building a regular RichBasicBlock 88
    has flow: false    has LSM: false
About to build basic block 89
is it a loop? false
Building a regular RichBasicBlock 89
GIMPLE CALL
GIMPLE CALL with a decl
name: user_disable_single_step	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: clear_tsk_thread_flag	isLSM: false	isFlow: false
GIMPLE CALL
GIMPLE CALL with a decl
name: clear_tsk_thread_flag	isLSM: false	isFlow: false
    has flow: false    has LSM: false
About to build basic block 90
is it a loop? false
Building a regular RichBasicBlock 90
    has flow: false    has LSM: false
About to build basic block 91
is it a loop? false
Building a regular RichBasicBlock 91
    has flow: false    has LSM: false
About to build basic block 1
is it a loop? false
There are 1 bbs with flow nodes (excluding those having LSM nodes)
Examining <78> (succs: 79 80 )
basic block 77 is a predecessor
got the corresponding RichBasicBlock
<77> (succs: 78 ) is white, visiting it first
basic block 76 is a predecessor
got the corresponding RichBasicBlock
(Loop header) <76> (succs: 75 77 ) is white, visiting it first
basic block 91 is a predecessor
got the corresponding RichBasicBlock
<91> (succs: 76 ) is white, visiting it first
basic block 90 is a predecessor
got the corresponding RichBasicBlock
<90> (succs: 91 77 ) is white, visiting it first
basic block 73 is a predecessor
got the corresponding RichBasicBlock
<73> (succs: 90 74 ) is white, visiting it first
basic block 72 is a predecessor
got the corresponding RichBasicBlock
<72> (succs: 73 87 ) is white, visiting it first
basic block 71 is a predecessor
got the corresponding RichBasicBlock
<71> (succs: 72 ) is white, visiting it first
basic block 5 is a predecessor
got the corresponding RichBasicBlock
<5> (succs: 71 ) is white, visiting it first
basic block 4 is a predecessor
got the corresponding RichBasicBlock
0x168bd70 is red
0x1523590 is red
basic block 6 is a predecessor
got the corresponding RichBasicBlock
<6> (succs: 71 7 ) is white, visiting it first
basic block 4 is a predecessor
got the corresponding RichBasicBlock
0x168bd70 is red
0x1523670 is red
basic block 70 is a predecessor
got the corresponding RichBasicBlock
<70> (succs: 71 ) is white, visiting it first
basic block 11 is a predecessor
got the corresponding RichBasicBlock
<11> (succs: 70 8 ) is white, visiting it first
basic block 10 is a predecessor
got the corresponding RichBasicBlock
<10> (succs: 11 8 ) is white, visiting it first
basic block 9 is a predecessor
got the corresponding RichBasicBlock
<9> (succs: 10 8 ) is white, visiting it first
basic block 7 is a predecessor
got the corresponding RichBasicBlock
<7> (succs: 9 8 ) is white, visiting it first
basic block 6 is a predecessor
got the corresponding RichBasicBlock
0x1523670 is red
0x15237a0 is red
0x15289b0 is red
0x1528ae0 is red
0x1528c10 is red
basic block 12 is a predecessor
got the corresponding RichBasicBlock
<12> (succs: 70 ) is white, visiting it first
basic block 8 is a predecessor
got the corresponding RichBasicBlock
<8> (succs: 12 13 ) is white, visiting it first
basic block 7 is a predecessor
got the corresponding RichBasicBlock
0x15237a0 is red
basic block 9 is a predecessor
got the corresponding RichBasicBlock
0x15289b0 is red
basic block 10 is a predecessor
got the corresponding RichBasicBlock
0x1528ae0 is red
basic block 11 is a predecessor
got the corresponding RichBasicBlock
0x1528c10 is red
0x15238d0 is red
0x1528d40 is red
basic block 69 is a predecessor
got the corresponding RichBasicBlock
<69> (succs: 70 ) is white, visiting it first
basic block 13 is a predecessor
got the corresponding RichBasicBlock
<13> (succs: 69 14 ) is white, visiting it first
basic block 8 is a predecessor
got the corresponding RichBasicBlock
0x15238d0 is red
0x1528e20 is red
basic block 68 is a predecessor
got the corresponding RichBasicBlock
<68> (succs: 69 ) is white, visiting it first
basic block 66 is a predecessor
got the corresponding RichBasicBlock
<66> (succs: 67 68 ) is white, visiting it first
basic block 18 is a predecessor
got the corresponding RichBasicBlock
<18> (succs: 66 ) is white, visiting it first
basic block 17 is a predecessor
got the corresponding RichBasicBlock
<17> (succs: 18 19 ) is white, visiting it first
basic block 16 is a predecessor
got the corresponding RichBasicBlock
<16> (succs: 17 19 ) is white, visiting it first
basic block 15 is a predecessor
got the corresponding RichBasicBlock
<15> (succs: 16 ) is white, visiting it first
basic block 14 is a predecessor
got the corresponding RichBasicBlock
<14> (succs: 15 16 ) is white, visiting it first
basic block 13 is a predecessor
got the corresponding RichBasicBlock
0x1528e20 is red
0x15f08c0 is red
0x15f09f0 is red
basic block 14 is a predecessor
got the corresponding RichBasicBlock
0x15f08c0 is red
0x15f0ad0 is red
0x15f0c00 is red
0x15f0d30 is red
basic block 65 is a predecessor
got the corresponding RichBasicBlock
<65> (succs: 66 ) is white, visiting it first
basic block 64 is a predecessor
got the corresponding RichBasicBlock
<64> (succs: 65 66 ) is white, visiting it first
basic block 19 is a predecessor
got the corresponding RichBasicBlock
<19> (succs: 64 20 ) is white, visiting it first
basic block 16 is a predecessor
got the corresponding RichBasicBlock
0x15f0ad0 is red
basic block 17 is a predecessor
got the corresponding RichBasicBlock
0x15f0c00 is red
0x15f0e10 is red
basic block 20 is a predecessor
got the corresponding RichBasicBlock
<20> (succs: 64 21 ) is white, visiting it first
basic block 19 is a predecessor
got the corresponding RichBasicBlock
0x15f0e10 is red
0x15f0f40 is red
basic block 63 is a predecessor
got the corresponding RichBasicBlock
<63> (succs: 64 ) is white, visiting it first
basic block 21 is a predecessor
got the corresponding RichBasicBlock
<21> (succs: 63 22 ) is white, visiting it first
basic block 20 is a predecessor
got the corresponding RichBasicBlock
0x15f0f40 is red
0x15f1070 is red
basic block 62 is a predecessor
got the corresponding RichBasicBlock
<62> (succs: 63 ) is white, visiting it first
basic block 61 is a predecessor
got the corresponding RichBasicBlock
<61> (succs: 62 63 ) is white, visiting it first
basic block 22 is a predecessor
got the corresponding RichBasicBlock
<22> (succs: 61 23 ) is white, visiting it first
basic block 21 is a predecessor
got the corresponding RichBasicBlock
0x15f1070 is red
0x1692030 is red
basic block 60 is a predecessor
got the corresponding RichBasicBlock
<60> (succs: 61 ) is white, visiting it first
basic block 23 is a predecessor
got the corresponding RichBasicBlock
<23> (succs: 60 24 ) is white, visiting it first
basic block 22 is a predecessor
got the corresponding RichBasicBlock
0x1692030 is red
0x1692160 is red
basic block 59 is a predecessor
got the corresponding RichBasicBlock
<59> (succs: 60 ) is white, visiting it first
basic block 24 is a predecessor
got the corresponding RichBasicBlock
<24> (succs: 59 25 ) is white, visiting it first
basic block 23 is a predecessor
got the corresponding RichBasicBlock
0x1692160 is red
0x1692290 is red
basic block 58 is a predecessor
got the corresponding RichBasicBlock
<58> (succs: 59 ) is white, visiting it first
basic block 25 is a predecessor
got the corresponding RichBasicBlock
<25> (succs: 58 26 ) is white, visiting it first
basic block 24 is a predecessor
got the corresponding RichBasicBlock
0x1692290 is red
0x16923c0 is red
basic block 57 is a predecessor
got the corresponding RichBasicBlock
<57> (succs: 58 ) is white, visiting it first
basic block 26 is a predecessor
got the corresponding RichBasicBlock
<26> (succs: 57 27 ) is white, visiting it first
basic block 25 is a predecessor
got the corresponding RichBasicBlock
0x16923c0 is red
0x16924f0 is red
basic block 56 is a predecessor
got the corresponding RichBasicBlock
<56> (succs: 57 ) is white, visiting it first
basic block 27 is a predecessor
got the corresponding RichBasicBlock
<27> (succs: 56 28 ) is white, visiting it first
basic block 26 is a predecessor
got the corresponding RichBasicBlock
0x16924f0 is red
0x1692620 is red
basic block 54 is a predecessor
got the corresponding RichBasicBlock
<54> (succs: 55 56 ) is white, visiting it first
basic block 28 is a predecessor
got the corresponding RichBasicBlock
<28> (succs: 54 29 ) is white, visiting it first
basic block 27 is a predecessor
got the corresponding RichBasicBlock
0x1692620 is red
0x1692750 is red
basic block 53 is a predecessor
got the corresponding RichBasicBlock
<53> (succs: 54 ) is white, visiting it first
basic block 29 is a predecessor
got the corresponding RichBasicBlock
<29> (succs: 53 30 ) is white, visiting it first
basic block 28 is a predecessor
got the corresponding RichBasicBlock
0x1692750 is red
0x1595ab0 is red
basic block 51 is a predecessor
got the corresponding RichBasicBlock
<51> (succs: 52 53 ) is white, visiting it first
basic block 30 is a predecessor
got the corresponding RichBasicBlock
<30> (succs: 51 31 ) is white, visiting it first
basic block 29 is a predecessor
got the corresponding RichBasicBlock
0x1595ab0 is red
0x1595be0 is red
basic block 33 is a predecessor
got the corresponding RichBasicBlock
<33> (succs: 51 ) is white, visiting it first
basic block 32 is a predecessor
got the corresponding RichBasicBlock
<32> (succs: 33 34 ) is white, visiting it first
basic block 31 is a predecessor
got the corresponding RichBasicBlock
<31> (succs: 32 89 ) is white, visiting it first
basic block 30 is a predecessor
got the corresponding RichBasicBlock
0x1595be0 is red
0x1595d10 is red
0x1595e40 is red
0x1595f70 is red
basic block 49 is a predecessor
got the corresponding RichBasicBlock
<49> (succs: 50 51 ) is white, visiting it first
basic block 36 is a predecessor
got the corresponding RichBasicBlock
<36> (succs: 49 37 ) is white, visiting it first
basic block 89 is a predecessor
got the corresponding RichBasicBlock
<89> (succs: 36 ) is white, visiting it first
basic block 31 is a predecessor
got the corresponding RichBasicBlock
0x1595d10 is red
0x1716250 is red
basic block 35 is a predecessor
got the corresponding RichBasicBlock
<35> (succs: 36 ) is white, visiting it first
basic block 34 is a predecessor
got the corresponding RichBasicBlock
<34> (succs: 35 36 ) is white, visiting it first
basic block 32 is a predecessor
got the corresponding RichBasicBlock
0x1595e40 is red
0x1596050 is red
0x1596180 is red
basic block 34 is a predecessor
got the corresponding RichBasicBlock
0x1596050 is red
0x1596260 is red
basic block 38 is a predecessor
got the corresponding RichBasicBlock
<38> (succs: 49 ) is white, visiting it first
basic block 37 is a predecessor
got the corresponding RichBasicBlock
<37> (succs: 38 39 ) is white, visiting it first
basic block 36 is a predecessor
got the corresponding RichBasicBlock
0x1596260 is red
0x1596390 is red
0x15964c0 is red
0x152a3b0 is red
basic block 50 is a predecessor
got the corresponding RichBasicBlock
<50> (succs: 51 ) is white, visiting it first
basic block 49 is a predecessor
got the corresponding RichBasicBlock
0x152a3b0 is red
0x152a4e0 is red
0x152a5c0 is red
basic block 52 is a predecessor
got the corresponding RichBasicBlock
<52> (succs: 53 ) is white, visiting it first
basic block 51 is a predecessor
got the corresponding RichBasicBlock
0x152a5c0 is red
0x152a6f0 is red
0x152a7d0 is red
0x152a8b0 is red
basic block 55 is a predecessor
got the corresponding RichBasicBlock
<55> (succs: 56 ) is white, visiting it first
basic block 54 is a predecessor
got the corresponding RichBasicBlock
0x152a8b0 is red
0x152a9e0 is red
0x152aac0 is red
0x152aba0 is red
0x152ac80 is red
0x152ad60 is red
0x1615b80 is red
0x1615c60 is red
0x1615d90 is red
basic block 61 is a predecessor
got the corresponding RichBasicBlock
0x1615c60 is red
0x1615e70 is red
0x1615f50 is red
0x1616080 is red
basic block 64 is a predecessor
got the corresponding RichBasicBlock
0x1615f50 is red
0x1616160 is red
basic block 67 is a predecessor
got the corresponding RichBasicBlock
<67> (succs: 68 ) is white, visiting it first
basic block 66 is a predecessor
got the corresponding RichBasicBlock
0x1616160 is red
0x1616290 is red
0x1616370 is red
0x1616450 is red
0x1616530 is red
0x1616610 is red
basic block 48 is a predecessor
got the corresponding RichBasicBlock
<48> (succs: 72 ) is white, visiting it first
basic block 39 is a predecessor
got the corresponding RichBasicBlock
<39> (succs: 40 48 ) is white, visiting it first
basic block 37 is a predecessor
got the corresponding RichBasicBlock
0x1596390 is red
0x15965a0 is red
basic block 47 is a predecessor
got the corresponding RichBasicBlock
<47> (succs: 48 ) is white, visiting it first
basic block 45 is a predecessor
got the corresponding RichBasicBlock
<45> (succs: 47 ) is white, visiting it first
basic block 41 is a predecessor
got the corresponding RichBasicBlock
<41> (succs: 42 45 ) is white, visiting it first
basic block 40 is a predecessor
got the corresponding RichBasicBlock
<40> (succs: 41 46 ) is white, visiting it first
basic block 39 is a predecessor
got the corresponding RichBasicBlock
0x15965a0 is red
0x15966d0 is red
0x1596800 is red
basic block 44 is a predecessor
got the corresponding RichBasicBlock
<44> (succs: 45 ) is white, visiting it first
basic block 42 is a predecessor
got the corresponding RichBasicBlock
<42> (succs: 43 44 ) is white, visiting it first
basic block 41 is a predecessor
got the corresponding RichBasicBlock
0x1596800 is red
0x1596930 is red
basic block 43 is a predecessor
got the corresponding RichBasicBlock
<43> (succs: 44 ) is white, visiting it first
basic block 42 is a predecessor
got the corresponding RichBasicBlock
0x1596930 is red
0x1529e70 is red
0x1529f50 is red
0x152a030 is red
basic block 46 is a predecessor
got the corresponding RichBasicBlock
<46> (succs: 47 ) is white, visiting it first
basic block 40 is a predecessor
got the corresponding RichBasicBlock
0x15966d0 is red
0x152a110 is red
0x152a1f0 is red
0x152a2d0 is red
0x16166f0 is red
0x1616820 is red
0x1716330 is red
0x1716460 is red
basic block 75 is a predecessor
Stuck in a loop, abandoning this path
0x17155a0 is red
basic block 90 is a predecessor
got the corresponding RichBasicBlock
0x1716330 is red
0x1715690 is red
basic block 74 is a predecessor
got the corresponding RichBasicBlock
<74> (succs: 78 ) is white, visiting it first
basic block 73 is a predecessor
got the corresponding RichBasicBlock
0x1616820 is red
0x1616950 is red
These are all the basic blocks:
<7> (succs: 9 8 )
<16> (succs: 17 19 )
<14> (succs: 15 16 )
<15> (succs: 16 )
<17> (succs: 18 19 )
<35> (succs: 36 )
<36> (succs: 49 37 )
<42> (succs: 43 44 )
<43> (succs: 44 )
<44> (succs: 45 )
<62> (succs: 63 )
<65> (succs: 66 )
<67> (succs: 68 )
<68> (succs: 69 )
<78> (succs: 79 80 )
<74> (succs: 78 )
<82> (succs: 83 84 )
<83> (succs: 84 )
<84> (succs: 85 81 )
<85> (succs: 86 )
<89> (succs: 36 )
<90> (succs: 91 77 )
(Loop header) <76> (succs: 75 77 )
<3> (succs: 4 )
<5> (succs: 71 )
<8> (succs: 12 13 )
<12> (succs: 70 )
<19> (succs: 64 20 )
<75> (succs: 76 )
<77> (succs: 78 )
<81> (succs: 86 )
<91> (succs: 76 )
<4> (succs: 5 6 )
<6> (succs: 71 7 )
<9> (succs: 10 8 )
<10> (succs: 11 8 )
<11> (succs: 70 8 )
<13> (succs: 69 14 )
<18> (succs: 66 )
<20> (succs: 64 21 )
<21> (succs: 63 22 )
<22> (succs: 61 23 )
<23> (succs: 60 24 )
<24> (succs: 59 25 )
<25> (succs: 58 26 )
<26> (succs: 57 27 )
<27> (succs: 56 28 )
<28> (succs: 54 29 )
<29> (succs: 53 30 )
<30> (succs: 51 31 )
<31> (succs: 32 89 )
<32> (succs: 33 34 )
<33> (succs: 51 )
<34> (succs: 35 36 )
<37> (succs: 38 39 )
<38> (succs: 49 )
<39> (succs: 40 48 )
<40> (succs: 41 46 )
<41> (succs: 42 45 )
<45> (succs: 47 )
<46> (succs: 47 )
<47> (succs: 48 )
<48> (succs: 72 )
<49> (succs: 50 51 )
<50> (succs: 51 )
<51> (succs: 52 53 )
<52> (succs: 53 )
<53> (succs: 54 )
<54> (succs: 55 56 )
<55> (succs: 56 )
<56> (succs: 57 )
<57> (succs: 58 )
<58> (succs: 59 )
<59> (succs: 60 )
<60> (succs: 61 )
<61> (succs: 62 63 )
<63> (succs: 64 )
<64> (succs: 65 66 )
<66> (succs: 67 68 )
<69> (succs: 70 )
<70> (succs: 71 )
<71> (succs: 72 )
<72> (succs: 73 87 )
<73> (succs: 90 74 )
<79> (succs: 80 )
<80> (succs: 82 81 )
<86> (succs: 88 )
<87> (succs: 88 )
<88> (succs: 1 )
<0> (succs: 2 )
<1> (succs: )
<2> (succs: 4 3 )
These are the basic blocks from the interesting subgraph:

Starting the walk until <78> (succs: 79 80 )
Configuration created, _constraints size: 0
Reached <0> (succs: 2 )
Handled all statements
----------------------
Result of the analysis
paths found: 0
paths rejected: 1
----------------------

