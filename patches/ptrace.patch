diff --git a/linux/config b/linux/config
new file mode 100644
index 0000000..311bca9
--- /dev/null
+++ b/linux/config
@@ -0,0 +1,8 @@
+general:
+  url:
+    dbfile: ./linux-v4.3.db
+    dbname: global_symbols
+  greedy: 0
+
+kernel/ptrace.c:
+  functions: [SYSC_ptrace]
diff --git a/linux/include/linux/err.h b/linux/include/linux/err.h
index a729120..59e3c88 100644
--- a/linux/include/linux/err.h
+++ b/linux/include/linux/err.h
@@ -20,22 +20,22 @@
 
 #define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)
 
-static inline void * __must_check ERR_PTR(long error)
+__attribute__((always_inline)) static inline void * __must_check ERR_PTR(long error)
 {
 	return (void *) error;
 }
 
-static inline long __must_check PTR_ERR(__force const void *ptr)
+__attribute__((always_inline)) static inline long __must_check PTR_ERR(__force const void *ptr)
 {
 	return (long) ptr;
 }
 
-static inline bool __must_check IS_ERR(__force const void *ptr)
+__attribute__((always_inline)) static inline bool __must_check IS_ERR(__force const void *ptr)
 {
 	return IS_ERR_VALUE((unsigned long)ptr);
 }
 
-static inline bool __must_check IS_ERR_OR_NULL(__force const void *ptr)
+__attribute__((always_inline)) static inline bool __must_check IS_ERR_OR_NULL(__force const void *ptr)
 {
 	return !ptr || IS_ERR_VALUE((unsigned long)ptr);
 }
@@ -47,13 +47,13 @@ static inline bool __must_check IS_ERR_OR_NULL(__force const void *ptr)
  * Explicitly cast an error-valued pointer to another pointer type in such a
  * way as to make it clear that's what's going on.
  */
-static inline void * __must_check ERR_CAST(__force const void *ptr)
+__attribute__((always_inline)) static inline void * __must_check ERR_CAST(__force const void *ptr)
 {
 	/* cast away the const */
 	return (void *) ptr;
 }
 
-static inline int __must_check PTR_ERR_OR_ZERO(__force const void *ptr)
+__attribute__((always_inline)) static inline int __must_check PTR_ERR_OR_ZERO(__force const void *ptr)
 {
 	if (IS_ERR(ptr))
 		return PTR_ERR(ptr);
diff --git a/linux/kernel/ptrace.c b/linux/kernel/ptrace.c
index 787320d..7eae3ae 100644
--- a/linux/kernel/ptrace.c
+++ b/linux/kernel/ptrace.c
@@ -216,7 +216,7 @@ static int ptrace_has_cap(struct user_namespace *ns, unsigned int mode)
 }
 
 /* Returns 0 on success, -errno on denial. */
-static int __ptrace_may_access(struct task_struct *task, unsigned int mode)
+__attribute__((always_inline)) static int __ptrace_may_access(struct task_struct *task, unsigned int mode)
 {
 	const struct cred *cred = current_cred(), *tcred;
 
@@ -270,7 +270,7 @@ bool ptrace_may_access(struct task_struct *task, unsigned int mode)
 	return !err;
 }
 
-static int ptrace_attach(struct task_struct *task, long request,
+__attribute__((always_inline)) static int ptrace_attach(struct task_struct *task, long request,
 			 unsigned long addr,
 			 unsigned long flags)
 {
@@ -378,7 +378,7 @@ out:
  * Performs checks and sets PT_PTRACED.
  * Should be used by all ptrace implementations for PTRACE_TRACEME.
  */
-static int ptrace_traceme(void)
+__attribute__((always_inline)) static int ptrace_traceme(void)
 {
 	int ret = -EPERM;
 
diff --git a/linux/linux-v4.3.db b/linux/linux-v4.3.db
new file mode 100644
index 0000000..9e3a3f3
Binary files /dev/null and b/linux/linux-v4.3.db differ
